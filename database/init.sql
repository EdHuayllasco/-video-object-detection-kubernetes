CREATE DATABASE viratdata;
\c viratdata

CREATE TABLE "videos" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(255),
  "created_at" timestamp DEFAULT (now())
);

CREATE TABLE "frames" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "video_id" int,
  "frame_number" int,
  "created_at" timestamp DEFAULT (now())
);

CREATE TABLE "frame_data" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "frame_id" int,
  "class" int,
  "x" float,
  "y" float,
  "width" float,
  "height" float,
  "confidence" float
);

CREATE TABLE "class_intervals" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "class" INT,
  "video_id" INT,
  "start_frame" INT,
  "end_frame" INT
);

CREATE OR REPLACE FUNCTION calculate_class_intervals()
RETURNS VOID AS $$
DECLARE
    current_class INT;
    current_video INT;
    start_frame INT;
    end_frame INT;
    frame_row RECORD;
    prev_frame INT := NULL;
BEGIN
    -- Limpiar la tabla de resultados previos
    DELETE FROM class_intervals;

    -- Iterar sobre las clases y videos
    FOR current_video, current_class IN 
        SELECT DISTINCT f.video_id, fd.class
        FROM frame_data fd
        JOIN frames f ON fd.frame_id = f.id
    LOOP
        start_frame := NULL;
        end_frame := NULL;
        prev_frame := NULL;

        -- Obtener los frames en orden
        FOR frame_row IN 
            SELECT f.frame_number
            FROM frame_data fd
            JOIN frames f ON fd.frame_id = f.id
            WHERE fd.class = current_class AND f.video_id = current_video
            ORDER BY f.frame_number
        LOOP
            IF prev_frame IS NULL OR frame_row.frame_number > prev_frame + 1 THEN
                -- Insertar el intervalo anterior
                IF start_frame IS NOT NULL THEN
                    INSERT INTO class_intervals (class, video_id, start_frame, end_frame)
                    VALUES (current_class, current_video, start_frame, end_frame);
                END IF;

                -- Nuevo intervalo
                start_frame := frame_row.frame_number;
                end_frame := frame_row.frame_number;
            ELSE
                -- Continuar el intervalo
                end_frame := frame_row.frame_number;
            END IF;

            -- Actualizar el frame previo
            prev_frame := frame_row.frame_number;
        END LOOP;

        -- Insertar el Ãºltimo intervalo
        IF start_frame IS NOT NULL THEN
            INSERT INTO class_intervals (class, video_id, start_frame, end_frame)
            VALUES (current_class, current_video, start_frame, end_frame);
        END IF;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

ALTER TABLE "frames" ADD FOREIGN KEY ("video_id") REFERENCES "videos" ("id");

ALTER TABLE "frame_data" ADD FOREIGN KEY ("frame_id") REFERENCES "frames" ("id");

CREATE INDEX idx_frames_video_id ON frames(video_id);
CREATE INDEX idx_frame_data_frame_id ON frame_data(frame_id);